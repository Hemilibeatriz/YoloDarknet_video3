# -*- coding: utf-8 -*-
"""Yolo e Darknet - Vídeo 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18AJY0t8I7E0a450NVkZLCCdGQkZMMyFp

##Configurando o GPU para utilização com o YOLO
"""

import tensorflow as tf
device_name = tf.test.gpu_device_name()
print(device_name)

"""##1- Download da Ferramenta Darknet"""

!git clone https://github.com/AlexeyAB/darknet

"""##Confirma se o clone deu certo"""

ls

"""##Muda o diretório para utilizar o Darknet"""

cd darknet

"""##Listar o que tem dentro do Darknet"""

ls

"""##2- Compilando a biblioteca com base na Pasta que está sendo acessada, para construir o framework para utilização"""

!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile

!make

"""##3- Baixando os pesos do modelo pré-treinado"""

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

"""##4- Testando o detector"""

!./darknet detect cfg/yolov4.cfg yolov4.weights data/giraffe.jpg

"""##5- Visualizando o resultado"""

import cv2
import matplotlib.pyplot as plt
def mostrar (frame):
  imagem = cv2.imread(frame)
  fig = plt.gcf() #função que chama uma figura do matplotlib
  fig.set_size_inches(18,10) #tamanho que vai ser gerada a saída
  plt.axis('off') #retira do formato padrão do matplotlib (como um plano cartesiano)
  plt.imshow(cv2.cvtColor(imagem, cv2.COLOR_BGR2RGB))
  plt.show()

mostrar('predictions.jpg')